name: CI/CD Pipeline

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Run SonarQube analysis and Unit Tests
      run: |
        mvn clean verify sonar:sonar -Dsonar.projectKey=${{ secrets.SONARQUBE_PROJECT_KEY }}
    
    - name: Compile Source and Dependencies
      run: mvn compile
      
    - name: Run Unit Tests and Enforce Code Coverage
      run: |
        mvn test
        echo "Checking code coverage..."
        COVERAGE=$(mvn jacoco:report | grep 'Coverage' | awk '{print $NF}' | sed 's/%//')
        echo "Code coverage is $COVERAGE%"
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "Code coverage is below 90%. Failing build."
          exit 1
        fi


  deploy-to-test:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ['eu-west-1', 'ap-southeast-2', 'us-east-1']
    steps:
    - uses: actions/checkout@v2
    - name: Deploy to AWS and Run Integration Tests
      run: |
        # Deployment and integration tests scripts for each region using matrix.region
    
    - name: Pre-Prod Testing
      run: |
        echo "Running stability and load tests..."
        # This is a placeholder for actual test commands. You might use tools like JMeter, Locust, or custom scripts.
        # For example, using curl to perform health checks:
        curl -f http://your-pre-prod-service-url/health || { echo 'Health check failed'; exit 1; }
        echo "Pre-prod testing completed successfully."


  deploy-to-prod:
    needs: deploy-to-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Blue/Green Deployment
      run: |
        # Assuming AWS CLI is set up and configured
          
          # Deploy to Blue environment
          echo "Deploying to Blue environment..."
          aws ecs update-service --cluster your-cluster-name --service your-service-name-blue --desired-count 1
          
          # Wait for deployment to complete
          echo "Waiting for deployment to complete..."
          aws ecs wait services-stable --cluster your-cluster-name --services your-service-name-blue
          
          # Perform QA tests on the Blue environment
          echo "Performing QA tests on Blue environment..."
          curl -f http://your-blue-service-url/qa || { echo 'QA tests failed'; exit 1; }
          
          # Sanity checks
          echo "Performing sanity checks..."
          curl -f http://your-blue-service-url/sanity || { echo 'Sanity checks failed'; exit 1; }
          
          # Switch router to point to Blue
          echo "Updating router to point to Blue environment..."
          # This is a simplified example using AWS CLI to change a DNS record in Route 53 to point to the Blue environment
          # Replace HOSTED_ZONE_ID, RECORD_SET_NAME, and BLUE_ENVIRONMENT_DNS_NAME with your actual values
          aws route53 change-resource-record-sets --hosted-zone-id HOSTED_ZONE_ID --change-batch '{
              "Comment": "Update record to reflect Blue environment",
              "Changes": [{
                  "Action": "UPSERT",
                  "ResourceRecordSet": {
                      "Name": "RECORD_SET_NAME",
                      "Type": "CNAME",
                      "TTL": 300,
                      "ResourceRecords": [{"Value": "BLUE_ENVIRONMENT_DNS_NAME"}]
                  }
              }]
          }'
          
          # Implementing dynamic rollback is complex and involves monitoring for errors, latency, and setting up alarms
          # Placeholder for CloudWatch alarm configuration or a script setup for rollback
          
          echo "Deployment completed. Monitoring for anomalies..."
          # Placeholder for monitoring setup. Ideally, use AWS CloudWatch to monitor application health and performance

          #In a real-world scenario, you would need to adjust the AWS CLI commands to match your specific AWS ECS service 
          #configuration, update the URL placeholders (your-blue-service-url) with actual service URLs, and replace the 
          #placeholders for your Route 53 HOSTED_ZONE_ID, RECORD_SET_NAME, and BLUE_ENVIRONMENT_DNS_NAME with the actual values.

          #For monitoring and dynamic rollback, you'd typically configure AWS CloudWatch alarms to track metrics 
          #such as error rates or response times. If an alarm triggers, it could invoke an AWS Lambda function or 
          #another automation tool/script to perform the rollback by updating the DNS record or load balancer 
          #configuration to point back to the Green environment. This part of the setup depends heavily on your 
          #specific AWS configuration, monitoring needs, and how you've structured your environments.